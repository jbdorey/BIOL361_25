[{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"introduction-to-the-r-practicals","dir":"Articles","previous_headings":"","what":"Introduction to the R practicals","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"BIOL361 take two practicals, based R. ’ve taken courses may already know ’m interested giving good knowledge coding R ’s extremely powerful tool careers. may overlap repetition, sorry advance, want make sure everyone can jump start working relatively even footing. prac focus teaching (1) basics R RStudio, (2) getting workspace ready, (3) reading data, (4) touch data manipulation, (5) creating simple plots. second prac focus basics running geographic information systems (GIS) analyses R. may already done GIS work ArcMap (expensive proprietary program works PC) QGIS (open source program works across PC, mac, Linux). previously found equally terrible , haven’t used either time now work R! Finally, small note mention pracitcals checked, double checked, run way make sure works. However, learn making code, yo ugive someone else ’re likely going break . ’s problem help ! , don’t stress much :)","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"working-together","dir":"Articles","previous_headings":"Introduction to the R practicals","what":"Working together","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"won’t forming groups per se, possible work together benches provide neighbours help code like. encourage neighbour may already overcome errors come across student helping one receiving help benefit! course, help well; Demonstrators answers , , Lecturers .","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"base-r-and-the-tidyverse","dir":"Articles","previous_headings":"Introduction to the R practicals","what":"base R and the tidyverse","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"tutorials notice tend use tidyverse packages — dplyr, magrittr, stringr, readr, ggplot2. thise rather using r packages, base, plot, several others couple good reasons. tidyverse easier read! one primary reasons! packages made work well together human-readable. Weh nwe want “filter” data rows literally `dplyr::filter() rows. want “select” certain columns, well dplyr::select() columns! want extract strings text match certain patterns, well can stringr::str_extract() strings. generally faster. may seem like much, ’re dealing hundreds millions data cells ’re going want quickly. general, tidyverese functinos faster base functions. Although, packages quicker. Using tidyverse doesn’t mean can’t also work together base R. don’t need pick ; work together perfectly well! especially get comfortable regard. Attention:  explicit using function certain function. see two columns, like dplyr::select(), know ’m calling package dplyr function select. functions can called one package; actually really good practice! also find makes easier make mistakes better-understand ’m .","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"getting-ready-with-r-and-rstudio","dir":"Articles","previous_headings":"","what":"Getting ready with R and RStudio","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"computers already R RStudio installed. , using personal computer, feel free follow steps prepare week 2 practicals, dive pretty quickly. moment spare time may consider skimming text, especially “Script preparation” “’s coming next week” sections.","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"install-r","dir":"Articles","previous_headings":"1 Getting ready with R and RStudio","what":"Install R","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"R installed computer already, go ahead now. Please visit CSIRO mirror CRAN download relevant version R operating system. , follow instructions install computer.","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"install-rstudio","dir":"Articles","previous_headings":"1 Getting ready with R and RStudio","what":"Install RStudio","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"R command-land programming language R, horribly ugly don’t like idea working directly. reason, users use R within much nicer interface program, called RStudio. Download free version RStudio. Now, programs installed, can simply open RStudio get coding! going much R today, don’t worry, ’d like get little acquainted least start installing packages R ready following weeks.","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"running-r-in-rstudio","dir":"Articles","previous_headings":"1 Getting ready with R and RStudio","what":"Running R in RStudio","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"get working RStudio, let’s make folder save practical outputs related files. Mine called “BIOL361_pracs_2025”. Notice used underscores instead spaces? good practice spaces folder paths want coding stuff. time ’s fine… , pro tip, sometimes, cause problems might hard track ! open RStudio first time, look little something like (Fig. 2). , without funky colour scheme. top left-hand side drop , white page green plus sign . Click can select add new “R Script” (Fig. 3). can go ahead save blank script folder pracs (Fig. 4). called script “MyFirstRScript.R”. ’s also good practice leave info made script, , can get touch ! Go ahead copy script personalise details! notice hashtags? comments R ignore (Fig. 5)!","code":"# BIOL361 at the University of Wollongong, very basic R stuff # Getting ready to do stuff with R # Written by FirstName LastName YEAR-MONTH-DAY University of Wollongong; your@email.here"},{"path":[]},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"working-directory-primer","dir":"Articles","previous_headings":"2 Script preparation","what":"Working directory primer","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"know many struggle concept working directories think important enough, pointed — thank :), describe detail. Just like content cover Conservation Biology (e.g., think macroecology), name sounds much scarier reality accepting hopefully help master concepts. (Upon reflection, may poor example many.) Similarly working directories actually quite simple! One way look working directory think breadcrumb trail root directory computer’s files stored directly working file (working directory) contains R project, code, files, etc. imagine root directory closet (e.g., / Mac/Linux C:\\ Windows). Within closet may shelves, hangers, shoe racks, , don’t look skeletons, laundry basket, etc. things might use keep closet nice, tidy, organised — folders. Within drawers may also compartments also consider folders , way, closet hierarchical system containing smaller smaller storage units (folders). units may contain units (folders), may also contain items like shirts, jewelry, shoes… take figure example item “Shirt” clothing; tells us use item. way, file extensions (e.g., file.extension) tells computer file open ! likely used things like images (.jpg, .tiff, .png), text files (.docx, .txt, .r), data files (.csv, .xlsx, .rda). Hence, might say Shirt.cloth! items files, just like .r file holds text code! essentially computer looks like! cloud storage like OneDrive GoogleDrive? Well, imagine keep stuff Elon Musk’s closet say “Let keep stuff closet use whenever want, closet just matchbox”. trust stuff Elon hope doesn’t cut , lose , sell someone else. probably fine, often rely internet access able use stuff closet. time start R project, make decision store closet. Maybe store somewhere hidden, maybe ’s first thing open door (near root directory). Every time want access project, associated items (files), might decide need search closet find everything (trust , finding anything closet used two years ago easy!!). choose directory Files tab RStudio. ’s headache. Alternatively, imagine next wanted find everything associated project just find .r code file top magical string attached working directory every item needed needed project. . Attention:  Windows gives file paths different way everyone else. :( Windows:  Windows, find file paths, right click file folder select “Properties”. , can copy file “Location”. , need change backslashes (\\) forward slashes (/). example: Becomes… MacOS:  Mac Linux, much easier. Using Mac, can right-click file hold “option” key Copy \"file/folder\" Pathname. Simply paste R get something like automatically:","code":"\"D:\\Users\\jamesdorey\\...\" \"D:/Users/jamesdorey/...\" '/Users/jamesdorey/...'"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"setting-the-working-directory","dir":"Articles","previous_headings":"2 Script preparation","what":"Setting the working directory","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"Let us begin telling R working directory (folder made ) actually . “BIOL361_pracs_2024” folder found end path: “/Users/jamesdorey/Desktop/Uni/Teaching/BIOL361/Lectures/2025/Github_BIOL361_25/BIOL361_25/DoreyPrac1” (see , spaces!). , can run : Congratulations, set working directory! R can still access files outside folder, look default set (must set time open R). quick pro-tip: can run code, ’s entered script mouse click , , line want run pressing “Run” button top right hand side script window. ’s right pain. mac can simply use “command+enter” PC can use “control+enter” run code. ’ll make life easier quicker.","code":"# Set the RootPath to your folder RootPath <- \"/Users/jamesdorey/Desktop/Uni/Teaching/BIOL361/Lectures/2025/Github_BIOL361_25/BIOL361_25/DoreyPrac1\"   # You can then set this as the project's working directory.    # This is where R will first look to find    # or save data as a default setwd(RootPath)"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"install-packages","dir":"Articles","previous_headings":"2 Script preparation","what":"Install packages","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"Let us also quickly install packages ’ll need start next week (mostly need per package per version R). may seen one package installed ran code. ’s normal, many packages depend packages work.","code":"#  This package is for data management and table manipulation install.packages(\"dplyr\") #  This package is for reading in tabular data, like .csv files install.packages(\"readr\") # This package lets us use tidy pipes; %>% install.packages(\"magrittr\") # This package is used to manipulate strings of text — it's really powerful!  install.packages(\"stringr\") # ggplot2 is an extremely powerful graphical packages install.packages(\"ggplot2\")"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"load-packages","dir":"Articles","previous_headings":"2 Script preparation","what":"Load packages","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"last R thing get today load packages R (also done every time open R, relevant packages). need may always want EVERY package ever downloaded accessible R… can cause issues. way, can selective ones active. can find info getting started R RStudio, along tutorials Coding Club.","code":"library(dplyr) library(readr) library(magrittr) library(ggplot2) library(stringr)"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"read-in-data","dir":"Articles","previous_headings":"","what":"Read in data","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"Let’s go ahead download dataset publication play . can start simply downloading using code (copy url website download via browser, R?). Okay, downloaded data can go ahead look working directory (’re sure type “getwd()” R see ). Let’s go ahead read R can also look ’s read . , use tidyverse package, readr. Now read , can view data either simply running “HylaeusData” “View(HylaeusData)”. can also scroll dataset. Q1: kind data looking ? Note: macroecology question relates lectures. statistical question coding question (although one things latter!)","code":"utils::download.file(url = \"https://raw.githubusercontent.com/jbdorey/BIOL361_25/main/DoreyPrac1/SuppCollectionInfo_7Aug2023.csv\",                      destfile = \"SuppCollectionInfo_7Aug2023.csv\",                      method=\"curl\") # read in the data using readr HylaeusData <- readr::read_csv(\"SuppCollectionInfo_7Aug2023.csv\") #> New names: #> Rows: 84 Columns: 42 #> ── Column specification #> ──────────────────────────────────── Delimiter: \",\" chr #> (31): recordNumber, otherCatalogNumbers, catalogNum... dbl #> (7): year, month, day, individualCount, coordinate... lgl #> (2): ...27, ...42 date (1): eventDate time (1): eventTime #> ℹ Use `spec()` to retrieve the full column specification #> for this data. ℹ Specify the column types or set #> `show_col_types = FALSE` to quiet this message. #> • `` -> `...27` #> • `` -> `...42`"},{"path":[]},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"filter","dir":"Articles","previous_headings":"4 Manipulate the data","what":"Filter","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"play data Excel, certainly , probably actions going . However, () slower, (b) less reproducible, (c) prone error. , let’s go ahead R! Let’s begin simple function filter dataset include male specimens. see easy ? don’t go ahead look data typing “HylaeusData_malesOnly” “View(HylaeusData_malesOnly)” R Console. Q2: many specimens marked “male” many marked “female”? many aren’t labeled sex ? need filtering figure . Hint: several ways figure many aren’t labelled sex. use dplyr::filter(.na(sex)). pretty basic bit data filtering ’re likely real life job. , ’s also pretty easy Excel. One powerful parts R coding can really complex things really, really, easily! don’t try -complex filtering command R? Q3: Hylaeus species found French Polynesia Micronesia?","code":"# We can create a new R dataset, without over-writing the previous one as below HylaeusData_malesOnly <- HylaeusData %>%    dplyr::filter(sex == \"male\") # Let's filter based on two out of three countries (French Polynesia, Micronesia, and Fiji) HylaeusData_FPandM <- HylaeusData %>%      # Use the %in% command to ask for ANY of the text strings *in* the country column   dplyr::filter(country %in% c(\"French Polynesia\", \"Micronesia\"))"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"subset-columns","dir":"Articles","previous_headings":"4 Manipulate the data","what":"Subset columns","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"Another thing might want data remove, select certain columns. actually pain Excel R much better. might share data, reduce size dataset (especially gets millions rows — , way, Excel tolerate).","code":"HylaeusData_spLatLon <- HylaeusData %>%    dplyr::select(scientificName, decimalLatitude, decimalLongitude)"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"create-a-new-column","dir":"Articles","previous_headings":"4 Manipulate the data","what":"Create a new column","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"leave one little tidbit R’s power ease use. One thing might Excel bit pain create new column using existing column. copy across annoying find-replace modify . pain! much easier R. Let’s mutate new column extract genus name scientificName column last dataset made! Note: dplyr::mutate heuristic function name dplyr. , can essentially use () add new column, (ii) -write columns, (iii) modify existing columns (essentially still -writing). , creating new column called “genus” filled output stringr::str_extract(string = scientificName, pattern = \"[-Z][-z]+\"). see ? used mutate function dplyr package create “genus” column, inside function used stringr function extract string matched provided pattern! also asked R place new column wanted ; .decimalLatitude column. Note: don’t need worry much pattern used. , context ’s language called regex (regular expression) ’s code works across coding languages just R. pattern asks CAPITAL LETTER Z ([-Z]) lowercase letter z ([-z]). latter also take lowercase letter pattern broken (+); .e. space genus species name!","code":"HylaeusData_spLL_G  <- HylaeusData_spLatLon %>%    dplyr::mutate(genus = stringr::str_extract(string = scientificName,                                               pattern = \"[A-Z][a-z]+\"),                 .before = decimalLatitude)"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"make-some-plots","dir":"Articles","previous_headings":"","what":"Make some plots","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"Okay, ’s probably moderate difficulty introduction data reading manipulation R. particularly using tidyverse packages like readr, dplyr, magrittr, stringr. Personally, really like tidyverse makes much easier human read code. ’s another tidyverse package ’s probably -widely used around. ggplot2. Let’s begin using ggplot2’s basic functions; next week use extensions package also make maps using data!","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"histogram","dir":"Articles","previous_headings":"5 Make some plots","what":"Histogram","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"start simple summary number male female bees dataset…  ’s easy way quickly look data identify looks like! see patterns? potential problems? Answer question . Q4: specimens “NA” sex? Hint: Bees actually usually quite easy sex.","code":"HylaeusHistogram <- ggplot2::ggplot(               # You need to tell ggplot2 which dataset to use             data = HylaeusData,               # ggplot2 also has an unusual way to specify the plot's AESthetics,                # using the \"aes()\" function             ggplot2::aes(x = sex)) +     # See that? ggplot2 uses a \"+\" to add new elements to their plots! This is quite      # useful and easy to code actually!    ggplot2::geom_histogram(stat = \"count\") #> Warning in ggplot2::geom_histogram(stat = \"count\"): #> Ignoring unknown parameters: `binwidth`, `bins`, and #> `pad`   # Now view the plot HylaeusHistogram"},{"path":[]},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"colour-by-sex","dir":"Articles","previous_headings":"5 Make some plots > 5.2 Make histograms prettier","what":"Colour by sex","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"can also make histograms bit prettier! nice, ? want (1) save plot object, like HylaeusHist_pretty, (2) view time, can also surround whole thing brackets — just little tip :)","code":"(HylaeusHist_pretty <- ggplot2::ggplot(               # You need to tell ggplot2 which dataset to use             data = HylaeusData,               # ggplot2 also has an unusual way to specify the plot's AESthetics,                # using the \"aes()\" function             ggplot2::aes(x = sex, fill = sex)) +     # See that? ggplot2 uses a \"+\" to add new elements to their plots! This is quite      # useful and easy to code actually!     ggplot2::geom_histogram(stat = \"count\")  ) #> Warning in ggplot2::geom_histogram(stat = \"count\"): #> Ignoring unknown parameters: `binwidth`, `bins`, and #> `pad`"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"choose-colours","dir":"Articles","previous_headings":"5 Make some plots > 5.2 Make histograms prettier","what":"Choose colours","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"’s great, relied R choose colours us. ’s fine, sometimes really want make thigns prettier still!","code":"(HylaeusHist_pretty <- ggplot2::ggplot(               # You need to tell ggplot2 which dataset to use             data = HylaeusData,               # ggplot2 also has an unusual way to specify the plot's AESthetics,                # using the \"aes()\" function             ggplot2::aes(x = sex, fill = sex)) +     # See that? ggplot2 uses a \"+\" to add new elements to their plots! This is quite      # useful and easy to code actually!     ggplot2::geom_histogram(stat = \"count\") +     # Let's use a MANUAL colour scale    ggplot2::scale_fill_manual(values = c(\"#E69F00\", \"#56B4E9\"),                               na.value = \"grey\") ) #> Warning in ggplot2::geom_histogram(stat = \"count\"): #> Ignoring unknown parameters: `binwidth`, `bins`, and #> `pad`"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"ggplot2-themes","dir":"Articles","previous_headings":"5 Make some plots > 5.2 Make histograms prettier","what":"ggplot2 themes","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"Wonderful! gross default background? Classic theme  Dark theme don’t know ’d ever use … unless dark mode website?  Linedraw theme never used one either, go!  plenty themes choose — see — completely customisable code won’t touch .","code":"(HylaeusHist_pretty <- ggplot2::ggplot(               # You need to tell ggplot2 which dataset to use             data = HylaeusData,               # ggplot2 also has an unusual way to specify the plot's AESthetics,                # using the \"aes()\" function             ggplot2::aes(x = sex, fill = sex)) +     # See that? ggplot2 uses a \"+\" to add new elements to their plots! This is quite      # useful and easy to code actually!     ggplot2::geom_histogram(stat = \"count\") +     # Let's use a MANUAL colour scale    ggplot2::scale_fill_manual(values = c(\"#E69F00\", \"#56B4E9\"),                               na.value = \"grey\") +     # Let's use a classic theme    ggplot2::theme_classic() ) #> Warning in ggplot2::geom_histogram(stat = \"count\"): #> Ignoring unknown parameters: `binwidth`, `bins`, and #> `pad` (HylaeusHist_pretty <- ggplot2::ggplot(               # You need to tell ggplot2 which dataset to use             data = HylaeusData,               # ggplot2 also has an unusual way to specify the plot's AESthetics,                # using the \"aes()\" function             ggplot2::aes(x = sex, fill = sex)) +     # See that? ggplot2 uses a \"+\" to add new elements to their plots! This is quite      # useful and easy to code actually!     ggplot2::geom_histogram(stat = \"count\") +     # Let's use a MANUAL colour scale    ggplot2::scale_fill_manual(values = c(\"#E69F00\", \"#56B4E9\"),                               na.value = \"grey\") +     # Let's use a classic theme    ggplot2::theme_dark() ) #> Warning in ggplot2::geom_histogram(stat = \"count\"): #> Ignoring unknown parameters: `binwidth`, `bins`, and #> `pad` (HylaeusHist_pretty <- ggplot2::ggplot(               # You need to tell ggplot2 which dataset to use             data = HylaeusData,               # ggplot2 also has an unusual way to specify the plot's AESthetics,                # using the \"aes()\" function             ggplot2::aes(x = sex, fill = sex)) +     # See that? ggplot2 uses a \"+\" to add new elements to their plots! This is quite      # useful and easy to code actually!     ggplot2::geom_histogram(stat = \"count\") +     # Let's use a MANUAL colour scale    ggplot2::scale_fill_manual(values = c(\"#E69F00\", \"#56B4E9\"),                               na.value = \"grey\") +     # Let's use a classic theme    ggplot2::theme_linedraw() ) #> Warning in ggplot2::geom_histogram(stat = \"count\"): #> Ignoring unknown parameters: `binwidth`, `bins`, and #> `pad`"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"line-graphs","dir":"Articles","previous_headings":"5 Make some plots","what":"Line graphs","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"also look line graphs specimens collected! cool R able translate date format meaningful X-axis.  Cool, want also see males females collected? Well, group ggplot2::aes(), , take advantage ggplot2’s simple method adding (+) new elements! , let’s add points based sex!  Q5: Make line plot eventDate (1) grouped sex (2) “male” warm colour, (3) “female” cool colour, (4) “NA” neutral shade.","code":"(HylaeusHist_pretty <- ggplot2::ggplot(               # You need to tell ggplot2 which dataset to use             data = HylaeusData,             ggplot2::aes(x = eventDate)) +     # See that? ggplot2 uses a \"+\" to add new elements to their plots! This is quite      # useful and easy to code actually!     ggplot2::geom_line(stat = \"count\") +     # Let's use a classic theme    ggplot2::theme_classic() ) #> Warning: Removed 10 rows containing non-finite outside the scale #> range (`stat_count()`). (HylaeusHist_pretty <- ggplot2::ggplot(               # You need to tell ggplot2 which dataset to use             data = HylaeusData,             ggplot2::aes(x = eventDate)) +     # See that? ggplot2 uses a \"+\" to add new elements to their plots! This is quite      # useful and easy to code actually!     ggplot2::geom_line(stat = \"count\") +     # Add in the point data; sometimes it's easier to define the data and aes within     # the new line, but it's not always necessary!    ggplot2::geom_point(data = HylaeusData,                        ggplot2::aes(x = eventDate,                                        # Grouping variable!                                      group = sex,                                       # note \"colour\" and not \"fill\" — you can play around with                                        # this depending on what you're doing                                     colour = sex),                        stat = \"count\") +    ggplot2::scale_colour_manual(values = c(\"#E69F00\", \"#56B4E9\"),                               na.value = \"hotpink\") +     # Let's use a classic theme    ggplot2::theme_classic() ) #> Warning: Removed 10 rows containing non-finite outside the scale #> range (`stat_count()`). #> Removed 10 rows containing non-finite outside the scale #> range (`stat_count()`)."},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"very-simple-statistical-test","dir":"Articles","previous_headings":"5 Make some plots","what":"Very simple statistical test","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"also want briefly show statistics also really easy R! may silly question ask, , ask collect female Hylaeus male Hylaeus, average. Without thinking much statistical robustness question, let’s use years sampling events. First, look number records year, calling base::table() function year, count us. Without going great detail, base::table() function returns class table object. Base R objects, compared tidyverse objects, can pain work . example, existence “row names” constant pain essentially column ’s harder interact . Instead, let’s use tidyverse build table; ’s longer bit confusing, actually easier using base::table() turning back tibble! apologies gets little long, feel free follow comments . Back statistics… look year sex, might collect females average! Let’s test using statistic; Z-test two proportions using default stats::prop.test() function. Z-test calculated estimated proportion females expected time --large females recorded (higher proportion) expected chance. … Q6: proportion different expected statistically significant level 5%? Hint: run proportionTest R console look statistical outputs. Attention:  completed questions shown demonstrator Lecturer answers outputs, may leave. , feel free hang around, play, help classmates.","code":"# Get a summary table of the counts per year table(HylaeusData$year) #>  #> 1934 1970 1977 1983 1984 2002 2003 2004 2014 2016 2017 2019  #>    2    3    3   11    1    4    7    1    3    1    2   36   # Now, get a summary matrix (or table) of year AND sex. table(HylaeusData$year, HylaeusData$sex) #>        #>        female male #>   1934      1    0 #>   1970      2    1 #>   1977      2    1 #>   1983      1   10 #>   1984      1    0 #>   2002      3    1 #>   2003      6    1 #>   2004      1    0 #>   2014      1    2 #>   2016      0    1 #>   2017      1    1 #>   2019     21   15   # Ask for the class of the R object class(table(HylaeusData$year, HylaeusData$sex)) #> [1] \"table\" HylaeusTable <- HylaeusData %>%      # First, we will gorup by year and sex to apply functions within those groupings   dplyr::group_by(year, sex) %>%      # Count the number in each year+sex group and then drop any \"NA\" or empty values (year and sex     # were not always recorded :( )   dplyr::count() %>%   tidyr::drop_na() %>%     # Make the tibble wider by putting each count of sex into its own column   tidyr::pivot_wider(names_from = sex,                      values_from = c(n)) %>%     # Instead of having \"NA\" for no males or females caught, make those into zero (for calculating     # The proportion of females below).   tidyr::replace_na(list(male = 0, female = 0)) %>%      # Calculate the proportion of females and the total numebr of specimens per year   dplyr::mutate(propFemale = female/(male+female),                 totalSpecimens = male+female)    # Test this statistically proportionTest <- stats::prop.test(x = HylaeusTable$propFemale,                   n = HylaeusTable$totalSpecimens) #> Warning in stats::prop.test(x = HylaeusTable$propFemale, n #> = HylaeusTable$totalSpecimens): Chi-squared approximation #> may be incorrect   # View the empirical proportion and the estiamted proportion of females  dplyr::tibble(proportionOfFemales = HylaeusTable$propFemale,               estimate = proportionTest$estimate,) #> # A tibble: 12 × 2 #>    proportionOfFemales estimate #>                  <dbl>    <dbl> #>  1              1       1       #>  2              0.667   0.222   #>  3              0.667   0.222   #>  4              0.0909  0.00826 #>  5              1       1       #>  6              0.75    0.188   #>  7              0.857   0.122   #>  8              1       1       #>  9              0.333   0.111   #> 10              0       0       #> 11              0.5     0.25    #> 12              0.583   0.0162"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"whats-coming-next-week","dir":"Articles","previous_headings":"","what":"What’s coming next week?","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"Next week, extending learnt order read GIS data, make maps, simple analyses.","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac1_BIOL361.html","id":"packages-used-today","dir":"Articles","previous_headings":"","what":"Packages used today","title":"BIOL361 Prac 1 — R and tidyverse basics","text":"Plus default R packages, base utils","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"gis-data-basics","dir":"Articles","previous_headings":"","what":"GIS data basics","title":"BIOL361 Prac 2 — GIS in R","text":"People often quite intimidated working data, let alone specialised datasets formats! Even Excell data formats can scary ’re inclined. , ’ll try dispell fears section even “complex” data can demistified. Much data going using isn’t actually complex!","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"raster-and-vector-data","dir":"Articles","previous_headings":"1 GIS data basics","what":"Raster and vector data","title":"BIOL361 Prac 2 — GIS in R","text":"Alright, know said data weren’t complex threw two random scary-sounding words . Well, don’t stress ’ll break also point raster vector data also regularly used us daily basis! shortest terms possible… raster data matrices/tables data vector data simply points lines.","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"raster-data-matrices-or-tables","dir":"Articles","previous_headings":"1 GIS data basics > 1.1 Raster and vector data","what":"Raster data (matrices or tables)","title":"BIOL361 Prac 2 — GIS in R","text":"One -commonly known raster file formats .jpg format. , many others commonly used, .tiff, .png, .gif. might wondering “Earth matrix table??”. loo, fair enough. take look dplyr logo. .png file, zoom , can start see pixels actualyl just cells matrix filled colour! logo resolution 240x277 (66,480) pixels.","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"vector-data-points-and-lines","dir":"Articles","previous_headings":"1 GIS data basics > 1.1 Raster and vector data","what":"Vector data (points and lines)","title":"BIOL361 Prac 2 — GIS in R","text":"Vector data formats even simpler, think raster data formats. , familiar formats! Probably -common one .pdf format. others exist like .svg .shp. Vector file formats pixels , actually benefits. means can keep zooming zooming vector file (just ) never see pixels! , can see cutout .pdf map file vector data (letters, numbers, points, lines) well raster data embedded (raster map elevation). left hand side can see can zoom 18ºS lines without pixels appearing. , right hand side, cna see lines map remain clear pixels map begin appear!","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"projections","dir":"Articles","previous_headings":"1 GIS data basics","what":"Projections","title":"BIOL361 Prac 2 — GIS in R","text":"something better covered another topic, briefly… earth less sphere, quite often want represent sphere flat surface (map). time, zoom enough isn’t really problem! However, zoom problematic ! reason “project” round map onto flat surface. “Projected Coordinate Systems”. Image ’s clear projection visually … diverse. becomes problem ’re analyses trying make maps! prac mostly circumvent issue using “Geographic [3D] Coordinate System” like WGS84 (). Image ","code":""},{"path":[]},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"install-and-load-packages","dir":"Articles","previous_headings":"2 Script preparation","what":"Install and load packages","title":"BIOL361 Prac 2 — GIS in R","text":"Set working directory . can last week’s new one — ! NEW packages use week. lost last week, go back install well. Although, also install GIS packages. Load packages week last week R.","code":"# Set the RootPath to your folder RootPath <- \"/Users/jamesdorey/Desktop/Uni/Teaching/BIOL361/Lectures/2025/Github_BIOL361_25/BIOL361_25/DoreyPrac1\"   # You can then set this as the project's working directory.    # This is where R will first look to find    # or save data as a default setwd(RootPath) install.packages(\"geodata\") install.packages(\"tidyterra\") library(dplyr) library(readr) library(magrittr) library(stringr) library(ggplot2) library(geodata) library(tidyterra)"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"gis-in-r-formats-and-packages","dir":"Articles","previous_headings":"2 Script preparation","what":"GIS in R formats and packages","title":"BIOL361 Prac 2 — GIS in R","text":"Different GIS programs tend different file formats. ArcMap cagey (’s proprietary program) bunch annoying proprietary file formats. QGIS open source tends use simpler formats (yay!). R --less able open formats read (even yay!). Let’s install needed packages short discussion [preferred] formats. “Raster data divide space rectangular grid cells commonly used represent spatially continuous phenomena, elevation weather. Satellite images also data structure, context grid cells often referred pixels. contrast, vector spatial data (points, lines, polygons) typically used represent discrete spatial entities, road, country, bus stop.” Attention:  Annoyingly, first time use terra sf new computer may need install dependencies. Try install terra sf packages first come back doesn’t work. Windows:  Windows, need first install Rtools get C++ compiler R can use. need recent version Rtools42 (rtools42-5355-5357). MacOS:  macOS, can use MacPorts Homebrew. MacPorts can sudo port install R-terra Homebrew, need first install GDAL: brew install pkg-config brew install gdal Followed (note additional configuration argument needed Homebrew)","code":"# Install terra install.packages(\"terra\", type = \"source\", configure.args = \"--with-proj-lib=$(brew --prefix)/lib/\")   # install sf install.packages(\"sf\", type = \"source\", configure.args = \"--with-proj-lib=$(brew --prefix)/lib/\")  library(terra) library(sf)"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"terra-formerly-raster","dir":"Articles","previous_headings":"2 Script preparation > 2.2 GIS in R formats and packages","what":"terra (formerly raster)","title":"BIOL361 Prac 2 — GIS in R","text":"terra package mostly used deal raster data, ability work vector data well. (also formerly called raster.) terra package two main data types, simply called SpatRaster SpatVector. (along minor types.)","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"sf-formerly-sp","dir":"Articles","previous_headings":"2 Script preparation > 2.2 GIS in R formats and packages","what":"sf (formerly sp)","title":"BIOL361 Prac 2 — GIS in R","text":"sf, simple feature package (formerly sp) mainly works vector data. ’s say --large, works points lines. However, abilities use raster well. large, sf works data frames tibbles (latter make readr::read_csv()!). Essentially, stores spatial data easily human-readable table!","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"read-and-plot-data","dir":"Articles","previous_headings":"","what":"Read and plot data","title":"BIOL361 Prac 2 — GIS in R","text":"Okay, maybe ’s enough faffing around! ’s know GIS, isn’t place learn . just want give brief overview ’s possible R future careers ’ll able amazing thigns conservation biology! talked lot data types, now think ’s past time get work !","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"raster","dir":"Articles","previous_headings":"3 Read and plot data","what":"Raster","title":"BIOL361 Prac 2 — GIS in R","text":"can often find raster datasets government, non-governmental, websites datasets. can spend ages looking around online best possible dataset download apply towards conservation goal. However, R also provides packages can easily quickly read datasets internet! , use R package geodata download Digital Elevation Model (DEM) os entirity Australia 30-second (~1 km) resolution. ! Within seconds spatRaster showing elevatino across Australia! Q1: Looking summary AustralianElevations, (1) dimensions file, (2) coordinate reference system projected geographic coordinate system (see “Projections” ), (3) minimum maximum elevational values map Australia? Let’s go ahead little peak data looks like now well. Quite often can just run terra::plot() map… however, don’t always recommend bigger GIS files can freeze computer. fact, ggplot2, help tidyterra better job !  Look, know ’m data nerd seriously? Within lines code minutes map Australia use publication analysis? ’s pretty powerful stuff! , elevation map Australia isn’t necessarrily interesting … maybe want species occurrence data go ?","code":"AustralianElevations <- geodata::elevation_30s(\"Australia\",                                path = RootPath)   # View a summary of the data AustralianElevations ## class       : SpatRaster  ## dimensions  : 4296, 5592, 1  (nrow, ncol, nlyr) ## resolution  : 0.008333333, 0.008333333  (x, y) ## extent      : 112.8, 159.4, -44.9, -9.1  (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326)  ## source      : AUS_elv_msk.tif  ## name        : AUS_elv_msk  ## min value   :         -60  ## max value   :        2159 (AusEleMap <- ggplot2::ggplot() +   tidyterra::geom_spatraster(data = AustralianElevations,                              ggplot2::aes(fill = AUS_elv_msk)) +     # Feel free to remove this line (don't leave an open \"+\" in the previous line) and     # see what happens! \"viridis\" is one of MANY colour palettes available with ggplot2   ggplot2::scale_fill_viridis_c(na.value = \"transparent\") ) ## <SpatRaster> resampled to 500340 cells."},{"path":[]},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"point-data","dir":"Articles","previous_headings":"3 Read and plot data > 3.2 Vector","what":"Point data","title":"BIOL361 Prac 2 — GIS in R","text":", let’s put points map! Just like last week, going download data ’ve hosted online read R. Okay, downloaded data can go ahead look working directory (’re sure type “getwd()” R see ). Let’s go ahead read R can also look ’s read . , use tidyverse package, readr.  Q2: type data just download? many rows data included? just downloaded available quality data Australian bee genus, Coelioxys! really cool cuckoo bees lay eggs nests bees genus Megachile — just like cuckoo birds! , let’s go ahead quick look data. Just show simple point data really GIS, simply plot longitude (x-axis) latitude (y-axis) able make outline Australia just using occurrence data! …see ’s kinda squished? Think back importance projection systems “see” world [map].  really, want make much nicer plot, points overlaid Australia. , let’s go ahead add onto previous ggplot2 object!  See, ggplot2 really clever! plot just regular tibble file! , complex things, want turn sf simple feature format. actually really easy ! don’t even need specify x y, R just knows use ggplot2::geom_sf() function now plot sf date format! also easily group data species.  Q3: many species dataset -widespread?","code":"utils::download.file(url = \"https://raw.githubusercontent.com/jbdorey/BIOL361_25/main/DoreyPrac2/Australian_Coelioxys.csv\",                      destfile = \"Australian_Coelioxys.csv\",                      method=\"curl\") # read in the data using readr CoelioxysData <- readr::read_csv(\"Australian_Coelioxys.csv\") ## Rows: 102 Columns: 101 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## chr (54): database_id, scientificName, family, subfamily, genus, species, sp... ## dbl (11): decimalLatitude, decimalLongitude, startDayOfYear, day, month, yea... ## lgl (36): subgenus, subspecies, infraspecificEpithet, identificationQualifie... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. plot(x = CoelioxysData$decimalLongitude, y = CoelioxysData$decimalLatitude) (AusEleMap_points <- AusEleMap +   ggplot2::geom_point(data = CoelioxysData,                       ggplot2::aes(x = decimalLongitude, y = decimalLatitude),                       colour = \"red\")) CoelioxysPoints <- CoelioxysData %>%   sf::st_as_sf(coords = c(\"decimalLongitude\", \"decimalLatitude\"),                 # we can even match the coordinate reference system as we make our points!                crs = sf::st_crs(AustralianElevations))    # now make the map using the \"sf\" data points (AusEleMap_points <- AusEleMap +   ggplot2::geom_sf(data = CoelioxysPoints,                     # Colour points by species name                    ggplot2::aes(colour = scientificName)                       ) +       # Add in a simpler theme     ggplot2::theme_bw())"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"polygon-data","dir":"Articles","previous_headings":"3 Read and plot data > 3.2 Vector","what":"Polygon data","title":"BIOL361 Prac 2 — GIS in R","text":"Remember said vector data just points lines? Well, far drawn points… Let’s add lines! data called “polygon” data still relatively simple. ’s also quite easy get REALLY great polygon map data R using couple packages, rnaturalearth rnaturalearthdata; latter need higher-resolution data. Let’s go ahead install+load packages . Now can go ahead see easy download even excellent GIS data directly R. useful functions might look depending purposes, rnaturalearth::ne_countries(), rnaturalearth::ne_coastline(), rnaturalearth::ne_states(). Obviously, download Australia map, depending stressed , encourage play around look countries well! Alright, ’ve downloaded map, obvious next step view map! use base::plot() function, take … unexpected consequences (’re feeling chaotic short time). Instead, let’s use ggplot2. Go ahead run review two maps . first map Australia tell second map . second map make idea polygons much clearer (time, change scale polygonMap ). Q4: Approximately many points many lines mysteryMap polygon?","code":"# Install packages install.packages(\"rnaturalearth\") install.packages(\"rnaturalearthdata\")   # Load packages library(rnaturalearth) library(rnaturalearthdata) # I'll choose an agnostic name for the file in case you download other countries. polygonMap <- rnaturalearth::ne_countries(   scale = 50, # Can be 110, 50, or 10; 10 is the highest resolution and requires rnaturalearthdata   country = \"Australia\",   type = \"map_units\",   returnclass = \"sf\" # You could also use \"SpatVector\" for the terra package!  ) # plot the map in ggplot2 (ggPolyMap <- ggplot2::ggplot(data = polygonMap) +    ggplot2::geom_sf())  (mysteryMap <- ggplot2::ggplot(data = polygonMap) +      ggplot2::geom_sf() +     ggplot2::ylim(-40.3,-39.5) + ggplot2::xlim(143,145)   )"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"simple-analyses","dir":"Articles","previous_headings":"","what":"Simple analyses","title":"BIOL361 Prac 2 — GIS in R","text":"Cool, raster data (DEM) vector data (points)… can information?! Well, one simplest things want raster (vector data like polygons) vector data extract information points. ’s quite easy achieve , don’t find elevation occurrence points?","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"extract-data","dir":"Articles","previous_headings":"4 Simple analyses","what":"Extract data","title":"BIOL361 Prac 2 — GIS in R","text":"working raster file, often easiest extract map data using terra package. Somewhat annoyingly, returns data.frame object two columns, “ID” “AUS_elv_msk”! can match data back original occurrences?! pretty easy turns ! Let’s work original CoelioxysData dataset information need, select scientificName, decimalLatitude, decimalLongitude make things easier. can bind columns together new CoelioxysElevations dataset using dplyr! order, fit together well! can analyses extracted data now well! example, look species interact elevation across ranges. can start grouping data using scientific names species dplyr. Within groups easily figure statistics like mean, median, max, min, etcetera. also easily plot data see patterns well! Note: people find dplyr’s mutate function quite confusing; used one . can think mutate function mutates columns data adding changing. chunk code, mutating new column called “mean_elevation”. also -write modify existing column. example wanted -write “mean_elevation”, add another mutate directly make something completely new, even change numeric value character value! Adding something like work … %>% dplyr::mutate(mean_elevation = mean_elevation %>% .character())  Q5: Can make new column median elevational values? Q6: Can restrict map view AusEleMap_points Australia’s North East corner? Hint: run ?ggplot2::ylim() ?ggplot2::xlim() pay attention latitude lonigtude values. Q7: happens change sign ylim (e.g., positive; 30 negative -30) xlim (e.g., positive; 140 negative -140)? Explain happens terms Earth plot covers.","code":"# Run the extraction CoelioxysElevations <- terra::extract(AustralianElevations, CoelioxysPoints)   # Examine the data's class class(CoelioxysElevations) ## [1] \"data.frame\" C_ele <- CoelioxysData %>%     # Select a subset of the columns   dplyr::select(scientificName, decimalLatitude, decimalLongitude) %>%     # Bind these columns with those from the new dataset   dplyr::bind_cols(CoelioxysElevations) C_ele <- C_ele %>%     # Group by scientific name to apply functions WITHIN group   dplyr::group_by(scientificName) %>%     # Create a new column with mean elevation per group   dplyr::mutate(mean_elevation = mean(AUS_elv_msk, na.rm = TRUE))    # Make a plot of the recently-extracted data per species (C_ele_boxplot <- ggplot2::ggplot(data = C_ele,                         ggplot2::aes(y = AUS_elv_msk,                                      group = scientificName,                                      colour = scientificName)) +   ggplot2::geom_boxplot()) ## Warning: Removed 15 rows containing non-finite outside the scale range ## (`stat_boxplot()`)."},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"find-the-distance-to-coastline-nearest-feature","dir":"Articles","previous_headings":"4 Simple analyses","what":"Find the distance to coastline (nearest feature)","title":"BIOL361 Prac 2 — GIS in R","text":"can also simple vector-vector analyses. , example, wanted know close point coast line (vector). First , can look points polygon together (helpful getting lay land, …  ask st_distance polygon map Australia point. Something like . Let’s look first ten distances (first ten points polygon). Hmm… ’s little odd, 8th point distance rest actually zero! ’re confused , don’t stress; moment figured measuring distance POLYGON essentially filled ! want measure distance coast line, need make conversion filled polygon simple line. can evendo within function employing sf::st_cast() function feeding polygonMap using pipes (%>%). go, think make bit sense! , can see eight point distance previous example. begs question… Q8: eight point (well 13th, 21st, 42nd, 74th) zero, others ? value stayed others changed? isn’t really trick question, just check understand . Attention:  completed questions shown demonstrator Lecturer answers outputs, may leave. , feel free hang around, play, help classmates.","code":"# plot the map in ggplot2 (polyPointMap <- ggplot2::ggplot() +    ggplot2::geom_sf(data = polygonMap) +     ggplot2::geom_sf(data = CoelioxysPoints)) distanceToPolygon <- CoelioxysPoints %>%   sf::st_distance(polygonMap)  head(distanceToPolygon, 10) ## Units: [m] ##           [,1] ##  [1,]    0.000 ##  [2,]    0.000 ##  [3,]    0.000 ##  [4,]    0.000 ##  [5,]    0.000 ##  [6,]    0.000 ##  [7,]    0.000 ##  [8,] 2721.523 ##  [9,]    0.000 ## [10,]    0.000 distanceToString <- CoelioxysPoints %>%   sf::st_distance(polygonMap %>% sf::st_cast(to = 'MULTILINESTRING'))  head(distanceToString, 10) ## Units: [m] ##             [,1] ##  [1,] 10738.3370 ##  [2,] 14067.9254 ##  [3,] 13034.8256 ##  [4,] 14067.9254 ##  [5,]  6758.1879 ##  [6,]   790.4992 ##  [7,]  2453.7997 ##  [8,]  2721.5232 ##  [9,]  2453.7997 ## [10,]  2453.7997"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/Prac2_BIOL361.html","id":"packages-used-today","dir":"Articles","previous_headings":"","what":"Packages used today","title":"BIOL361 Prac 2 — GIS in R","text":"Plus default R packages, base utils well geodata","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/articles/birdwingR.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"","text":"Use temporary working directory","code":"setwd(tempdir()) library(magrittr) library(BeeBDC) library(dplyr) library(bdc)"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/birdwingR.html","id":"prepare-data","dir":"Articles","previous_headings":"","what":"Prepare data","title":"","text":"Access stored downloaded data Read data apply filtering","code":"# Download data utils::download.file(url = \"https://raw.githubusercontent.com/jbdorey/BIOL361_25/main/vignettes/records-2025-02-20/records-2025-02-20.csv\",                      destfile = \"records-2025-02-20.csv\",                      method=\"curl\") # Read data and run initial flags RichmondBirdwingData <- readr::read_csv(\"records-2025-02-20/records-2025-02-20.csv\",                                         col_types = BeeBDC::ColTypeR()) %>%   dplyr::mutate(database_id = paste0(\"RBB_\", 1:nrow(.)),                 .before = scientificName) %>%    bdc::bdc_scientificName_empty(data = ., sci_name = \"scientificName\") %>%   bdc::bdc_coordinates_empty(data = ., lat = \"decimalLatitude\",                              lon = \"decimalLongitude\") %>%   bdc::bdc_coordinates_outOfRange(data = ., lat = \"decimalLatitude\",                                   lon = \"decimalLongitude\") %>%   bdc::bdc_basisOfRecords_notStandard(     data = .,     basisOfRecord = \"basisOfRecord\",     names_to_keep = c(       # Keep all plus some at the bottom.       \"Event\",       \"HUMAN_OBSERVATION\",       \"HumanObservation\",       \"LIVING_SPECIMEN\",       \"LivingSpecimen\",       \"MACHINE_OBSERVATION\",       \"MachineObservation\",       \"MATERIAL_SAMPLE\",       \"O\",       \"Occurrence\",       \"MaterialSample\",       \"OBSERVATION\",       \"Preserved Specimen\",       \"PRESERVED_SPECIMEN\",       \"preservedspecimen Specimen\",       \"Preservedspecimen\",       \"PreservedSpecimen\",       \"preservedspecimen\",       \"S\",       \"Specimen\",       \"Taxon\",       \"UNKNOWN\",       \"\",       NA,       \"NA\",       \"LITERATURE\",        \"None\", \"Pinned Specimen\", \"Voucher reared\", \"Emerged specimen\"     )) %>%    BeeBDC::flagAbsent(data = ., PresAbs = \"occurrenceStatus\") %>%   BeeBDC::flagLicense(data = .,                       strings_to_restrict = \"all\",                       # DON'T flag if in the following dataSource(s)                       excludeDataSource = NULL) %>%   BeeBDC::summaryFun(     data = .,     # Don't filter these columns (or NULL)     dontFilterThese = NULL,     # Remove the filtering columns?     removeFilterColumns = FALSE,     # Filter to ONLY cleaned data?     filterClean = FALSE) ##  - We will flag all columns starting with '.' # Space RichmondBirdwingData <- RichmondBirdwingData %>%   BeeBDC::jbd_coordinates_precision(data = ., lon = \"decimalLongitude\",                                     lat = \"decimalLatitude\", ndec = 2  # number of decimals to be tested   ) %>%   BeeBDC::coordUncerFlagR(data = ., uncerColumn = \"coordinateUncertaintyInMeters\",                           threshold = 1000) %>%   BeeBDC::dupeSummary(     data = .,     path = tempdir(),     # options are \"ID\",\"collectionInfo\", or \"both\"     duplicatedBy = \"collectionInfo\",      # The columns to generate completeness info from (and to sort by completness)     completeness_cols = c(\"decimalLatitude\",  \"decimalLongitude\",                           \"scientificName\", \"eventDate\"),     # The columns to ADDITIONALLY consider when finding duplicates in collectionInfo     collectionCols = c(\"decimalLatitude\", \"decimalLongitude\", \"scientificName\", \"eventDate\",                         \"recordedBy\"),     # The columns to combine, one-by-one with the collectionCols     collectInfoColumns = c(\"catalogNumber\", \"otherCatalogNumbers\"),     # Custom comparisons — as a list of columns to compare     # RAW custom comparisons do not use the character and number thresholds     CustomComparisonsRAW = dplyr::lst(c(\"catalogNumber\", \"institutionCode\", \"scientificName\")),     # Other custom comparisons use the character and number thresholds     CustomComparisons = dplyr::lst(                                    c(\"occurrenceID\", \"scientificName\")),     # The order in which you want to KEEP duplicated based on data source     # try unique(check_time$dataSource)     sourceOrder = c(\"CAES\", \"Gai\", \"Ecd\",\"BMont\", \"BMin\", \"EPEL\", \"ASP\", \"KP\", \"EcoS\", \"EaCO\",                     \"FSCA\", \"Bal\", \"SMC\", \"Lic\", \"Arm\",                     \"USGS\", \"ALA\", \"VicWam\", \"GBIF\",\"SCAN\",\"iDigBio\"),     # Paige ordering is done using the database_id prefix, not the dataSource prefix.     prefixOrder = c(\"Paige\", \"Dorey\"),     # Set the complexity threshold for id letter and number length     # minimum number of characters when WITH the numberThreshold     characterThreshold = 2,     # minimum number of numbers when WITH the characterThreshold     numberThreshold = 3,     # Minimum number of numbers WITHOUT any characters     numberOnlyThreshold = 5   ) %>% # END dupeSummary   dplyr::as_tibble(col_types = BeeBDC::ColTypeR()) %>%    BeeBDC::summaryFun(data = ., dontFilterThese = NULL, removeFilterColumns = FALSE,                      filterClean = FALSE) ##  - Generating a basic completeness summary from the decimalLatitude, decimalLongitude, scientificName, eventDate columns. ## This summary is simply the sum of complete.cases in each column. It ranges from zero to the N of columns. This will be used to sort duplicate rows and select the most-complete rows. ##  - Updating the .summary column to sort by... ##  - We will NOT flag the following columns. However, they will remain in the data file. ## .gridSummary, .lonFlag, .latFlag, .uncer_terms, .uncertaintyThreshold, .unLicensed ##  - Identified 0 duplicate records and kept 0 unique records using the column(s):  ## catalogNumber, institutionCode, scientificName ##  - Identified 0 duplicate records and kept 0 unique records using the column(s):  ## occurrenceID, scientificName ##  - Identified 0 duplicate records and kept 0 unique records using the columns:  ## decimalLatitude, decimalLongitude, scientificName, eventDate, recordedBy, and catalogNumber ##  - Identified 0 duplicate records and kept 0 unique records using the columns:  ## decimalLatitude, decimalLongitude, scientificName, eventDate, recordedBy, and otherCatalogNumbers ##  - Clustering duplicate pairs... ## Duplicate pairs clustered. There are 0 duplicates across 0 kept duplicates. ##  - Ordering prefixs... ##  - Ordering data by 1. dataSource, 2. completeness and 3. .summary column... ##  - Find and FIRST duplicate to keep and assign other associated duplicates to that one (i.e., across multiple tests a 'kept duplicate', could otherwise be removed)... ##  - Duplicates have been saved in the file and location: /tmp/RtmpfUCTzTduplicateRun_collectionInfo_2025-04-03.csv ##  - Across the entire dataset, there are now 0 duplicates from a total of 1,187 occurrences. ##  - We will flag all columns starting with '.' table(RichmondBirdwingData$scientificName) ##  ## Ornithoptera richmondia  ##                    1187"},{"path":"https://jbdorey.github.io/BIOL361_25/articles/birdwingR.html","id":"make-interactive-maps","dir":"Articles","previous_headings":"","what":"Make interactive maps","title":"","text":"Output interactive map using modified functino BeeBDC","code":"RichmondBirdwingData %>%    interactiveMapR(outPath = getwd(),                   speciesList = \"ALL\",                   returnPlot = TRUE) ## Loading required namespace: leaflet ## The column .expertOutlier was not found. One will be created with all values = TRUE. # Make a map where the QLD points are all red RichmondBirdwingData %>%   dplyr::mutate(.summary = dplyr::if_else(stateProvince == \"Queensland\", FALSE, TRUE)) %>%    BeeBDC::interactiveMapR(outPath = getwd(),                           speciesList = \"ALL\") ## The column .expertOutlier was not found. One will be created with all values = TRUE."},{"path":"https://jbdorey.github.io/BIOL361_25/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James B. Dorey. Author, maintainer, copyright holder.","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dorey J (2025). BIOL361: Conservation Biology. R package version 1.0, https://jbdorey.github.io/BIOL361_25/.","code":"@Manual{,   title = {BIOL361: Conservation Biology},   author = {James B. Dorey},   year = {2025},   note = {R package version 1.0},   url = {https://jbdorey.github.io/BIOL361_25/}, }"},{"path":"https://jbdorey.github.io/BIOL361_25/index.html","id":"biol361--conservation-biology-25","dir":"","previous_headings":"","what":"Conservation Biology","title":"Conservation Biology","text":"Dr James B Dorey, University Wollongong","code":""},{"path":[]},{"path":"https://jbdorey.github.io/BIOL361_25/index.html","id":"overview","dir":"","previous_headings":"University of Wollongong","what":"Overview","title":"Conservation Biology","text":"simple GitHub page host activities BIOL361 cohort. includes Weeks four five practicals James Dorey associated files, like interactive Richmond Birdwing map.","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/index.html","id":"directory","dir":"","previous_headings":"","what":"Directory","title":"Conservation Biology","text":"Practical four Practical five Birdwing butterfly map","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Conservation Biology","text":"Contributors names contact info Dr James Dorey, jdorey@uow.edu.au, @jamesbeedorey.bsky.social","code":""},{"path":"https://jbdorey.github.io/BIOL361_25/index.html","id":"version-history","dir":"","previous_headings":"","what":"Version History","title":"Conservation Biology","text":"Initial Release fixes","code":""}]
